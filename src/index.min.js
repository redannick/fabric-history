fabric.Canvas.prototype.initialize = (function (originalFn) {
	return function (...args) {
		originalFn.call(this, ...args);
		this._historyInit();
		return this
	}
})(fabric.Canvas.prototype.initialize);
fabric.Canvas.prototype.dispose = (function (originalFn) {
	return function (...args) {
		originalFn.call(this, ...args);
		this._historyDispose();
		return this
	}
})(fabric.Canvas.prototype.dispose);
fabric.Canvas.prototype._historyNext = function () {
	return JSON.stringify(this.toDatalessJSON(this.extraProps))
}
fabric.Canvas.prototype._historyEvents = function () {
	return {
		"object:added": this._historySaveAction,
		"object:removed": this._historySaveAction,
		"object:modified": this._historySaveAction,
		"object:skewing": this._historySaveAction
	}
}
fabric.Canvas.prototype._historyInit = function () {
	this.historyUndo = [];
	this.historyRedo = [];
	this.on(this._historyEvents())
}
fabric.Canvas.prototype._historyDispose = function () {
	this.off(this._historyEvents())
}
fabric.Canvas.prototype._historySaveAction = function () {
	if (this.historyProcessing)
		return;
	const json = this.historyNextState;
	let next = this._historyNext();
	if (json === next)
		return;
	this.historyRedo = [];
	this.historyUndo.push(json);
	this.historyNextState = next;
	this.fire('history:append', {
		json: json
	})
}
fabric.Canvas.prototype.recordUndoPoint = function () {
	this._historySaveAction()
}
fabric.Canvas.prototype.undo = function () {
	if (this.historyProcessing)
		return;
	this.historyProcessing = !0;
	const history = this.historyUndo.pop();
	if (history) {
		var currentState = this._historyNext()
		this.historyNextState = history;
		this.historyRedo.push(currentState);
		this.loadFromJSON(history, () => {
			this.renderAll();
			this.fire('history:undo');
			this.historyProcessing = !1
		})
	} else {
		this.historyProcessing = !1
	}
}
fabric.Canvas.prototype.redo = function () {
	if (this.historyProcessing)
		return;
	this.historyProcessing = !0;
	const history = this.historyRedo.pop();
	if (history) {
		var currentState = this._historyNext()
		this.historyNextState = history;
		this.historyUndo.push(currentState);
		this.loadFromJSON(history, () => {
			this.renderAll();
			this.fire('history:redo');
			this.historyProcessing = !1
		})
	} else {
		this.historyProcessing = !1
	}
}
fabric.Canvas.prototype.clearHistory = function () {
	this.historyUndo = [];
	this.historyRedo = [];
	this.fire('history:clear')
}